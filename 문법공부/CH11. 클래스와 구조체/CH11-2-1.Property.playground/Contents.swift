import UIKit


/*
 
 1-2) 지연 저장 속성 ( Lazy Stored Properties )

*/

func doSomething() -> Double {
    return 0.2
}

struct Bird1 {
    var name: String
    lazy var weight: Double = doSomething()
    
    init(name: String){
        self.name = name
    }
    
    func fly(){
        print("날다")
    }
}

var aBird1 = Bird1(name: "새")

// name [  "새"  ]
// weight 속성 초기화 되지 않음

aBird1.weight
// 해당 변수에 접근하는 이 시점에서 초기화가 됨
// weight [   0.2   ]

/*
 
 인스턴스 초기화 시점과 지연저장 속성 초기화 시점이 다르다.
 인스턴스 초기화 시점에서는 name이 초기화됨.
 지연저장 속성 변수에 접근하는 순간 weight가 초기화됨.
 
 ==================================================
 
 지연저장 속성이란?
 : "해당 저장 속성"의 초기화를 지연(lazy)시키는 것
 
 즉, 인스턴스 초기화 시점에 해당 속성이 값을 갖고 초기화되는
 것이 아니라 ( 메모리에 공간과 값을 갖는 것이 아니라 ),
 해당 속성(변수)에 접근하는 순간에 해당 속성만 개별적으로 초기화됨.
 
 따라서, 상수로의 선언이 불가능!
 lazy var만 가능 ( lazy let XXX )
 
*/




// 주의점

// 📝 Note. 지연 저장 속성은 " 선언시점에 기본값을 저장 "해야함.

/*
 생성자에서 초기화를 시키지 않기 때문에 " 선언시점에 기본값을 저장 "해야함
 
 - 지연(lazy) 저장 속성 -> 구조체, 클래스 동일
 - 값을 넣거나, 표현식( dosomething과 같은 함수 실행문 )을 넣을 수 있음
    ( 모든 형태의 표현식 사용 가능 )
 - 함수 호출 코드, 계산코드, 클로저 코드 등도 모두 가능
    -> 저장하려는 속성과 "리턴형"만 일치하면 됨.
 - 지연 저장 속성으로 선언된 "해당 속성"의 초기화 지연.
    -> 메모리 공간이 없다가 처음 접근하는 순간에 ( 해당 속성만 ) 개별적으로 초기화됨.
 */



/*
 지연 저장 속성을 사용하는 이유?
 */

class AView {
    var a: Int
    
    // 1. 메모리 공간을 많이 차지하는 이미지 등의 속성에 저장할 때,
    lazy var view = UIImageView()
    
    // 2. 다른 속성을 이용해야할 때
    lazy var b:Int = {
        return a * 10
    }()
    
    init(num: Int) {
        self.a = num
    }
}

var view1 = AView(num: 10)

// view1
// a [  10  ]
// b [ a * 10 ] -> 지연 저장 속성

/* 2번 경우
 b의 값을 초기화할 때,
 a값이 이미 메모리에 저장이 되어있어야지만
 b를 초기화 할 수 있다.
 
 즉, 다른 저장 속성에 의존해야만 할 때, 지연저장 속성을 사용
*/


/*
 
 1) 메모리 공간을 많이 차지하는 이미지 등의 속성에 저장할 때,
    반드시 메모리에 다 올릴 필요가 없어서 지연 저장 속성으로 선언함
    ( 메모리 낭비를 막음 )
 
 2) 다른 속성에 의존할 때,
    초기화 시점에 모든 속성들이 동시에 메모리 공간에 저장됨.
    어떤 한가지 속성이 다른 속성에 접근할 수가 없다.
    하지만, 지연 저장 속성을 이용하면, 먼저 초기화된 속성에 접근이 가능함.
 
 
 -> 실제 프로젝트에서 많이 사용 ⭐️
 */
