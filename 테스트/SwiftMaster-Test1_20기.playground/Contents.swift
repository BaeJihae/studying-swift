import UIKit

/*:
# 앨런 - Swift 마스터 스쿨 20기
*/
/*:
## 첫번째 테스트 (2주차)
---
*/
/**>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 그동안 배운 내용의 복습 및 약간의 응용이 들어가 있을 뿐입니다. 이 문제를 잘 풀 수 있다고
 좋은 개발자가 될 수 있는 것도 아니고, 실망하거나 좌절할 필요도 없습니다.
 우린 이제 시작일 뿐입니다. 😄
 가장 중요한 것은 포기하지 않고, 꾸준함을 유지하는 것일뿐!
 안풀리면, 다음 문제로 넘어가면되고, 이번에 못풀면 잘 공부해서, 다음 번에 똑같은 문제를 잘 풀면됩니다.
 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>**/

// 서술형의 경우, 주석처리를 하고 작성하면 됩니다.
// (시간이 약간 모자랄 수도 있을 것 같긴한데, 되는 대로 풀어서, 슬랙 DM으로 전달해 주세요!)


/**==================================================================
 [1번 문제]
  - 하나의 앱이 실행되면, 메모리는 어떤 4가지 영역으로 나누어 지나요? 4가지 영역의 이름을 쓰세요.
 ===================================================================**/

// 코드, 데이터, 힙, 스택




/**==================================================================
 [2번 문제]
  - 프로그래밍에서, 표현식(Expression)이 어떤 의미인가요? 아는대로 작성하세요.
 ===================================================================**/


// 표현할 수 있는 식을 표현식이라고 한다.
// 문자라던지, 숫자라던지, 값을 출력해내거나 계산하여 출력하는 식
// 예를 들어, 3 * y, y, 3




/**==================================================================
 [3번 문제]
  -  반복문을 사용해서, 1부터 10까지 값을 더한 결과값을 출력하는 코드를 작성해 보세요.
    (힌트: 변수를 하나 만들고, 해당 변수를 이용 어떤 반복문을 어떻게 사용할지 고민해 보세요.)
 ===================================================================**/


var n: Int = 0
for i in 1...10{
    n += i
}
print(n)















/**==================================================================
 [4번 문제]
  -  튜플이 뭔가요? 간단한 개념을 1-2줄로 서술 하고, 간단한 코드 예시를 하나 만들어 보세요.
 ===================================================================**/

/*
    튜플은 여러가지의 값들을 하나로 묶어주는 기능을 한다.
    함수에서의 output 출력값은 무조건 하나의 값으로만 출력이 가능하다.
    하지만 튜플을 사용하면 여러 가지의 출력 값을 출력할 수 있다.
*/

var some = (1, 3)

print(some)





/**==================================================================
 [5번 문제]
  -  구구단을 2단부터, 9단까지 출력하는 코드를 반복문을 사용해서 만들어 보세요.
    (힌트: 어떤게 반복이 되어야 할까요? 구구단에서 반복이 되는 부분이 어디죠?)
 ===================================================================**/

for i in 2...9{
    print("구구단 \(i)단")
    for j in 1...9{
        print("\(i) * \(j) = \(i*j)")
    }
}











/**==================================================================
 [6번 문제]
  - 함수만들어 보기: 여러개의 정해지지 않은 갯수의 정수를 받아서, 평균을 구하는 함수를 작성해 보세요.
    (힌트: 함수의 이름은 누구봐도 알아볼 수 있게, 평균..이란 말이 들어가면 좋겠네요!)
 ===================================================================**/


func avgFunction(_ n: [Int]) -> Double {
    var sum = 0
    for i in n{
        sum += i
    }
    return Double(sum) / Double(n.count)
}

let array: [Int] = [ 1, 3, 5, 6, 7]
print("\(array)의 평균은 \(avgFunction(array))")









/**==================================================================
 [7번 문제]
 - 함수만들어 보기: 2개의 정수를 입력 받아, 그 숫자들을 더한 결과값을 문자열로 반환하는
   함수를 작성해 보세요.
   (힌트: 문자열로 반환하려면, 함수 안에서 변환의 과정이 한번 필요하겠네요.)
 ===================================================================**/



func sumString(_ n:Int, _ m:Int) -> String{
    return String(n + m)
}

print("1과 2의 합은 \(sumString(1, 2))이다.")









/**==================================================================
 [8번 문제]
  - 함수의 파라미터에서 사용하는 inout키워드에 대해서, 간단하게 설명해 보세요.
 ===================================================================**/

// 함수 내에 변수를 복사해서 전달하는 것이 아닌 변수 자체의 주소값을 복사하여 전달하는 키워드이다.




/**==================================================================
 [9번 문제]
  -  다음의 제어전송문 4가지를 각각 쓰이는 경우와 어떻게 사용되는지 간단하게 설명하세요.
    (break / fallthrough / continue / return)
    (힌트1: break는 2가지 경우에 쓰입니다.)
    (힌트2: return은 리턴타입이 있는 함수/리턴타입이 없는 함수 구분해서, 설명해 주세요.)
 ===================================================================**/

// 1.break문
// 반복문에서는 반복문을 빠져나갈 때 쓰인다.
// switch문에서는 switch문을 종료하는 경우에 쓰인다.


// 2.fallthrough문
// switch 문에서 case를 넘기지 않고, 통과할 때 쓰인다.


// 3.continue문
// 반복문에서 지금 돌고 있는 루트를 빠져나가 다음 루트로 이동하는 경우에 쓰인다.


// 4.return문
// 리턴 타입이 있는 함수의 경우 - 함수의 결과값을 반환할 때 쓰인다.
// 리턴 타입이 없는 경우 - 함수를 종료하고 싶을 때 쓰인다.




/**==================================================================
 [10번 문제]
  - nil이 뭘까요? 아는대로 설명해 보세요!
 ===================================================================**/

// nil은 .none과는 같은 의미로
// 원래 값이 나와야 하지만, 아직 값이 정해지지 않아서 에러를 피하기 위해 잠시 임의로 값이 없다는 것을 표현하기 위한 표현법이다.





/**==================================================================
 [11번 문제]
  - Optional 타입에는 .none이 있는데, 이것과 nil의 공통점 또는 차이점은?
 ===================================================================**/

// nil과 .none은 완전 동일한 개념이다.
// .none은 옵셔널의 열거형 타입으로 아무값도 들어있지 않다는 것을 의미
// nil은 옵셔널 타입의 변수에 아무런 값이 들어있지 않을 때, 출력하면 나오는 값




/**==================================================================
 [12번 문제]
  - Optional을 언래핑(Unrapping) 하는 4가지 방법은? 간단하게 서술로 쓰시면 됩니다.
 ===================================================================**/

// 1번 방법
// 강제로 !바인딩


// 2번 방법
// 값이 있을 경우를 if로 물어본 뒤 !로 바인딩


// 3번 방법
// if let 바인딩


// 4번 방법
// 닐 코얼레싱 ( 디폴드 값을 제시 )




/**==================================================================
 [13번 문제]
  - 열거형(Enum)은 어떤 경우에 사용하는 타입인가요? 아는대로 간단하게 서술해 보세요.
 ===================================================================**/

// 비슷한 요소를 한 개념으로 묶을 때 사용한다.
// 열거형을 사용하면, 가독성과 안정성이 높아진다.
// 사용자가 마음대로 정의할 수 있는 커스텀 타입이다.
// 예를 들어, 동서남북 / 오른쪽 왼쪽 중앙
// 같은 개념을 정의할 때 쓰인다.





/**==================================================================
 [14번 문제]
 구글(google), 페이스북(facebook), 네이버(naver) 로그인을 위해 SiteLogin라는 이름을 가진
 아래의 Enum 타입을 완성해 보세요.
 
 각 case는 사용자의 아이디(String)와 비밀번호(String)를 위한 연관 값(associated value)을  가집니다.
 
 (만들고자 하는 타입 예시)
 enum SiteLogin { }
 
 (변수에 담았을때의 모습)
 var login1 = SiteLogin.google("google@gmail.com", "0000")
 
  (힌트: 연관값이라는 개념을 어떻게 사용해야 하죠?)
 ===================================================================**/

// 아래의 enum타입 완성

enum SiteLogin {
    case google(_ id: String, _ pw: String)
    case facebook(_ id: String, _ pw: String)
    case naver(_ id: String, _ pw: String)
}


var login1 = SiteLogin.google("google@gmail.com", "0000")








/**>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 수고 하셨습니다. 😄
 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>**/
