메서드의 메모리 구조의 이해

코 데 힙 스

코드	명령어의 묶음
	앱 실행시, 모든 코드가 일단 코드 영역에 올라감.
	그리고 순차적으로 한줄씩 실행됨.

데이터	전역변수 및 타입속성이 저장
	어디서도 접근 가능한 데이터
	예를 들면, 클래스나 구조체를 저장

힙	참조타입 ( 클래스의 객체, 클로저 )
	예를 들면, 클래스의 객체를 생성하면,
	클래스의 객체가 힙 영역에 올라감

스택	함수의 실행시 필요 데이터가 생성,
	사용 완료 후엔 사라짐


Class Dog {
	var name
	var weight
	func sit() {
		print("앉아.")
	}
	func layDown() {
		print("누워.")
	}
}

위의 클래스는 데이터 영역에 저장.

bori = Dog()

스택의 메인 영역에 bori라는 변수가 생성이 되면서
그 변수에는 bori의 메모리 주소가 저장됨.

bori라는 클래스의 객체는 힙 영역에 저장
이때, 클래스의 메서드(함수)의 메모리 주소까지 저장되지 않고
클래스의 속성만이 저장된다.

bori.sit()

위의 명령어를 입력했을 때,
데이터 영역에서 sit()의 메모리 주소를 찾고,
sit()의 메모리 주소로 이동해서
스택의 bori.sit()이라는 영역을 만들어서
함수를 실행 후 리턴값을 반환

bori.sit()은 스택에서 없어짐.

-> 메서드 디스패치

구조체의 경우에는 코드에 메모리주소를 넣어놔서, 데이터에서 메모리 주소를 찾는 과정이 생략되어 클래스 보다 빠르게 동작한다.


